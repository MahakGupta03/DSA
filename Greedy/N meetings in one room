class Meeting{
    int start;
    int end;
    Meeting(int start, int end ){
        this.start = start;
        this.end = end;
    }
}

class MeetingComparator implements Comparator<Meeting>{
    @Override
    public int compare(Meeting m1, Meeting m2){
        if(m1.end < m2.end) return -1;
        else if(m1.end > m2.end) return 1;
        else return 0;
    }
}

class Solution 
{
   /*the intution is if we finish meeting early then more meetings can me done hence we 
   sort the meetings accoding to end time*/
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        ArrayList<Meeting> list = new ArrayList<>();
        for(int i=0;i<n;i++){
            list.add(new Meeting(start[i], end[i]));
        }
        MeetingComparator mc = new MeetingComparator();
        Collections.sort(list, mc); //sort the arraylist according to the end time 
        int count = 1;
        int endLimit = list.get(0).end;
        for(int i=1; i<n;i++){
            if(list.get(i).start > endLimit){  //check if next meeting start time is greater than end time of previous meeting
                endLimit = list.get(i).end;
                count++;
            }
        }
        return count;
        
    }
}

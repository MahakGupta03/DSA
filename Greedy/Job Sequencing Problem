class jobComparator implements Comparator<Job>{
    @Override
    public int compare(Job j1, Job j2){
        if(j1.profit > j2.profit) return -1;
        else if(j1.profit < j2.profit) return 1;
        else return 0;
    }
}

class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    /* sort the jobs by profit and then add the profit to get maxmimum profit. We try to perform the job at its deadline */
    int[] JobScheduling(Job arr[], int n)
    {
        //first take the maximum deadline so that we get the maximum time in which jobs can be done
        int maxDeadline = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            maxDeadline = Math.max(maxDeadline, arr[i].deadline);
        }
        //create an array to track the jobs which are done , maxDeadline+1 to get maxDeadline job
        int jobs[] = new int[maxDeadline+1];
        Arrays.fill(jobs,-1);
        
        //sort by profit
        Arrays.sort(arr, new jobComparator());
        
        
        int profit = 0;
        int total = 0;
        for(int i=0;i<n;i++){
            for(int j = arr[i].deadline; j>0; j--){ //if a job at its last deadline is already filled then we move back to see if any slot is empty 
                if(jobs[j]==-1){
                    jobs[j] = arr[i].id;
                    profit+=arr[i].profit;
                    total++;
                    break;
                }
            }
        }
        return new int[]{total, profit};
    }
}

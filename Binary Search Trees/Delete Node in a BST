public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return root;
        if(root.val == key) return helper(root);
        TreeNode curr = root;
        while(curr!=null){
            if(curr.val > key){
                if(curr.left!=null && curr.left.val==key){
                    curr.left = helper(curr.left);
                    break;
                }
                else {
                    curr = curr.left;
                }
            }
            else{
                if(curr.right!=null &&curr.right.val==key){
                    curr.right = helper(curr.right);
                    break;
                }
                else{
                    curr = curr.right;
                }
            }
        }
        return root;
    }

    public TreeNode helper(TreeNode root){
        if(root.left==null){
            return root.right;
        }
        if(root.right==null){
            return root.left;
        }
        TreeNode rightChild = root.right;
        TreeNode lastRightChild = findRightChild(root.left);
        lastRightChild.right = rightChild;
        return root.left;
    }

    public TreeNode findRightChild(TreeNode root){
        if(root.right == null){
            return root;
        }
        return findRightChild(root.right);
    }

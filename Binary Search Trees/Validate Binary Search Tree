class Solution {
// OPTIMAL APPORACH
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    /* Set a range to check the value is within it or not */
    public boolean isValidBST(TreeNode root, long minValue, long maxValue){
        if(root == null) return true;
        if(root.val>=maxValue || root.val<=minValue)return false;
        return isValidBST(root.left, minValue, root.val) && isValidBST(root.right, root.val, maxValue);
    }


//BRUTE FORCE
    // public void inorder(TreeNode root, List<Integer> ans){
    //     if(root==null) return;
    //     inorder(root.left, ans);
    //     ans.add(root.val);
    //     inorder(root.right, ans);
    // }

    // public boolean isValidBST(TreeNode root) {
    //     List<Integer> ans = new ArrayList<>();
    //     inorder(root, ans);
    //     for(int i=1;i<ans.size();i++){
    //         if(ans.get(i)<=ans.get(i-1)) return false;
    //     }
    //     return true;
    // }

}

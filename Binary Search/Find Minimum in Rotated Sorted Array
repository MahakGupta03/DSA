 /* THIS IS ALSO CORRECT(MYSELF) */
    public int findMin(int[] nums) {
        int n = nums.length;
        int start = 0;
        int end = n-1;
        int mini = Integer.MAX_VALUE;
        while(start<=end){
            int mid = start+(end-start)/2;
            mini = nums[mid];
            if(nums[start]<mini && nums[start]< nums[end]){
                end = mid-1;
            }
            else if(nums[end]<mini && nums[end]< nums[start]){
                start = mid+1;
            }
            else{
                start++;
                end--;
            }
        }
        return mini;
    }

    /* FULLY OPTIMIZED */
    // public int findMin(int[] nums) {
    //     int n = nums.length;
    //     int start = 0;
    //     int end = n-1;
    //     int mini = Integer.MAX_VALUE;
    //     while(start<=end){
    //         int mid = start+(end-start)/2;
    //         if(nums[start]<=nums[end]){
    //             mini = Math.min(mini, nums[start]);
    //             break;
    //         }
    //         if(nums[start]<=nums[mid]){
    //             mini = Math.min(mini, nums[start]);
    //             start= mid+1;
    //         }
            
    //         else{
    //             mini = Math.min(mini, nums[mid]);
    //             end = mid-1;
    //         }
    //     }
    //     return mini;
    // }

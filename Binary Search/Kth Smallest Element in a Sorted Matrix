class Solution {
    /* BRUTE FORCE */
    // public int kthSmallest(int[][] matrix, int k) {
    //     int n = matrix.length;
    //     int m = matrix[0].length;
    //     int arr[] = new int[n*m];
    //     int l=0;
    //     for(int i=0;i<matrix.length;i++){
    //         for(int j=0;j<matrix[0].length;j++){
    //             arr[l++] = matrix[i][j]; 
    //         }
    //     }
    //     Arrays.sort(arr);
    //     return arr[k-1];
    // }


/* OPTIMAL */
    public int kthSmallest(int[][] mat, int k) {
        int n=mat.length;
        int low=mat[0][0];
        int high=mat[n-1][n-1];
        
        while(low<high){
            int mid=low+(high-low)/2;
            int count=isValid(mat,mid);
            if(count>=k){
                high=mid;
            }else{
                low=mid+1;
            }
        
            
            
        }
        return low;
        
    }
    
    int isValid(int [][]mat, int mid){
        int count=0;
        int n=mat.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++)
            {
                if(mat[i][j]<=mid)
                    count++;
            }
        }
        
        return count;
    }
}

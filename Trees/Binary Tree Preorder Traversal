/* RECURSIVE */
public void preorder(TreeNode root, ArrayList<Integer> list){
        if(root==null){
            return;
        }
        list.add(root.val);
        preorder(root.left,list);
        preorder(root.right,list);
    }
 public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        preorder(root, list);
        return list;

        
    }

    /* ITERATIVE */
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        if(root==null){
            return list;
        }
        Stack<TreeNode> s = new Stack<>();
        s.add(root);
        while(!s.isEmpty()){
            TreeNode topNode = s.peek();
            list.add(topNode.val);
            s.pop();
            if(topNode.right!=null){
                s.add(topNode.right);
            }
            if(topNode.left!=null){
                s.add(topNode.left);
            }
        }
        return list;

        
    }

/*
  TC-> O(N)
  SC-> O(N)
*/
public int maxSum(TreeNode root, int maxPathValue[]){
        if(root==null) return 0;
        //this 0 is added because if at any node we get negative sum then be does not add negative sum instead we add 0 
        int leftSum = Math.max(0,maxSum(root.left, maxPathValue));
        int rightSum = Math.max(0,maxSum(root.right,maxPathValue));
        maxPathValue[0] = Math.max(maxPathValue[0], leftSum+rightSum+root.val);
        return Math.max(leftSum,rightSum)+root.val;
    }
    public int maxPathSum(TreeNode root) {
        int maxPathValue[] = new int[1];
        maxPathValue[0] = Integer.MIN_VALUE;
        maxSum(root, maxPathValue);
        return maxPathValue[0];
    }

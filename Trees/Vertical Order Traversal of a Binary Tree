class Tuple{
    TreeNode node;
    int vertical;
    int level;
    Tuple(TreeNode _node, int ver, int levl){
        node = _node;
        vertical = ver;
        level = levl;
    }
}

class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer,TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        Queue<Tuple> q = new LinkedList<>();
        q.add(new Tuple(root,0,0));
        while(!q.isEmpty()){
            Tuple tuple = q.poll();
            TreeNode node = tuple.node;
            int vertical = tuple.vertical;
            int level = tuple.level;
            if(!map.containsKey(vertical)){
                map.put(vertical,new TreeMap<>());
            }

            if(!map.get(vertical).containsKey(level)){
                map.get(vertical).put(level,new PriorityQueue<>());
            }

            map.get(vertical).get(level).offer(node.val);

            if(node.left!=null){
                q.offer(new Tuple(node.left,vertical-1,level+1));
            }
            if(node.right!=null){
                q.offer(new Tuple(node.right,vertical+1,level+1));
            }

        }
        List<List<Integer>> list = new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>>ys : map.values()){
            list.add(new ArrayList<>());
            for(PriorityQueue<Integer> nodes : ys.values()){
                while(!nodes.isEmpty()){
                    list.get(list.size()-1).add(nodes.poll());
                }
            }
        }
        return list;
    }
}

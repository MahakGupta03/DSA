/*RECURSIVE */
public void inorder(TreeNode root, List<Integer> list){
        if(root==null){
            return;
        }
        inorder(root.left,list);
        list.add(root.val);
        inorder(root.right,list);
    }

public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<>();
    inorder(root, list);
    return list;
        
    }


/*ITERATIVE*/
    public List<Integer> inorderTraversal(TreeNode root) {
         List <Integer> list = new LinkedList<>();
        Stack <TreeNode> s = new Stack<>();
        TreeNode node = root;
       while(true){
           if(node!=null){
               s.push(node);
               node = node.left;
           }
           else{
               if(s.isEmpty()) break;
               node = s.peek();
               s.pop();
               list.add(node.val);
               node = node.right;
           }
       }
        return list;

 /* RECURSIVE */
public void postOrder(TreeNode root, List<Integer> list){
        if(root==null) return ;
        postOrder(root.left,list);
        postOrder(root.right,list);
        list.add(root.val);
    }
 public List<Integer> postorderTraversal(TreeNode root) {

        List<Integer> list = new LinkedList<>();
        postOrder(root,list);
        return list;
}


/*ITERATIVE*/
    public List<Integer> postorderTraversal(TreeNode root) {

        List<Integer> postOrder = new LinkedList<>();
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        if(root==null) return postOrder;
        s1.push(root);
        while(!s1.isEmpty()){
            root = s1.peek();
            s2.push(s1.pop());
            if(root.left!=null){
                s1.push(root.left);
            }
            if(root.right!=null){
                s1.push(root.right);
            }
        }
        while(!s2.isEmpty()){
            postOrder.add(s2.pop().val);
        }
        return postOrder;
   }


/* SINGLE STACK(TLE error) */
 public List<Integer> postorderTraversal(TreeNode root) {

        List<Integer> list = new LinkedList<>();
        Stack<TreeNode> st = new Stack<>();
        TreeNode curr = root;
        while(curr!=null || !st.isEmpty()){
            if(curr!=null){
                st.push(curr);
                curr=curr.left;
            }
            else{
                TreeNode temp = st.peek().right;
                if(temp==null){
                    temp = st.peek();
                    st.pop();
                    list.add(temp.val);
                    while(!st.isEmpty() && temp==st.peek().right){
                        list.add(st.pop().val);
                    }

                }
                else{
                    curr=temp;
                }
            }
        }
        return list;

    }

  /*-------OPTIMIZED(RECURCIVE TRAVERSAL)----------*/
/*
    TC-> O(N)
    SC-> O(H)       (H -> Height of the Tree)
 */
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        rightView(root,0,list);
        return list;
    }

    public void rightView(TreeNode node, int level,List<Integer> list){
        if(node==null) return;
        // if there is a new level add the right value to list
        if(level==list.size()){
            list.add(node.val);
        }
        rightView(node.right,level+1, list);
        rightView(node.left,level+1, list);
    }


    /*-------ITERATIVE(LEVEL ORDER TRAVERSAL)----------*/
class Pair{
     TreeNode node;
     int level;
     Pair(TreeNode node, int level){
         this.node = node;
         this.level = level;
     }
 }
class Solution {

     public List<Integer> rightSideView(TreeNode root) {
        Queue<Pair> q = new LinkedList<>();
        TreeMap<Integer,Integer>map = new TreeMap<>();
        List<Integer> list = new ArrayList<>();
        if(root==null) return list;
        q.offer(new Pair(root,0));
        while(!q.isEmpty()){
            Pair pair = q.poll();
            TreeNode n = pair.node;
            int l = pair.level;
            if(!map.containsKey(l)){
                map.put(l,n.val);
            }
            if(n.right!=null){
                q.offer(new Pair(n.right,l+1));
            }
            if(n.left!=null){
                q.offer(new Pair(n.left,l+1));
            }
        }

        for(Map.Entry<Integer,Integer> entry : map.entrySet()){
            list.add(entry.getValue());
        }
        return list;
  
    }

}


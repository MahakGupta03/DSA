class Solution {
    /* is question me hum pehle merge sort se single array k 2 part krenge or fir un dono 
    parts me hum check krenge ki kitne reverse pairs bn rhe h fir un dono array ko merge kr denge */

    //countPairs function me hum left or right array me traverse krenge or left array k elements ko right array k elements se contition match kraenge
    public static int countPairs(int arr[], int low, int mid, int high){
        int right = mid+1; //starting index of right array
        int cnt = 0; //takes count of pairs
        for(int i=low;i<=mid;i++){  //moving till end of left array
            while(right<=high && arr[i]>2*(long)arr[right]){  //check for condition till end of right array
                right++;
            }
            //if arr[i]<2*arr[right], then we stoop in count the pairs
            cnt+=(right-(mid+1));
        }
        return cnt;
    }

    private static void merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>(); 
        int left = low;      
        int right = mid + 1;  
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }
        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
    }

    public static int mergeSort(int[] arr, int low, int high) {
        int cnt =0;
        if (low >= high) return cnt;
        int mid = (low + high) / 2 ;
        cnt+= mergeSort(arr, low, mid);  // left half
        cnt+= mergeSort(arr, mid + 1, high); // right half
        cnt+= countPairs(arr,low, mid, high);
        merge(arr, low, mid, high);  // merging sorted halves
        return cnt;
    }

    public int reversePairs(int[] nums) {
        int n = nums.length;
        return mergeSort(nums, 0, n-1);

    }
}

class Solution {

//OPTIMAL
    /* isme hum 2 pointer ka use krenge, i ko fix rakhenge or j and k ko move krenge , 
    agr sum 0 se chota ho jata h to hum sum bdhaenge j++ krke,
    or agr sum bada ho jata h 0 se to hum chota krenge k-- se, 
    or agr hume ek br triplet mil gaye to fir hum i,j and k ko tb tk bdhenge jb 
    tk koi naya element nhi milta */
    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            int j=i+1;
            int k = n-1;
            while(j<k){
                int sum = nums[i]+ nums[j] + nums[k];
                if(sum<0){
                    j++;
                }
                else if(sum>0){
                    k--;
                }
                else{
                    List<Integer> list = Arrays.asList(nums[i], nums[j], nums[k]);
                    ans.add(list);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--;
                }
            }
       }
       return ans;
    }

/*BETTER -  ek set bnao taki koi bhi triplet repeat na ho, for 3 loops ka use krke triplet find kro unko list me add kro, 
list ko sort kro or usko set me dal do, last me set jo bhi h vo answer h */
    // public List<List<Integer>> threeSum(int[] nums) {
        
    //     Set<List<Integer>> set = new HashSet<>();
    //     int n = nums.length;
    //     for(int i=0;i<n-2;i++){
    //         for(int j=i+1;j<n-1;j++){
    //             for(int k=j+1;k<n;k++){
    //                 if(nums[i]+nums[j]+nums[k]==0){
    //                     List<Integer> list = new ArrayList<>();
    //                     list.add(nums[i]);
    //                     list.add(nums[j]);
    //                     list.add(nums[k]);
    //                     list.sort(null);
                        
    //                     set.add(list);
    //                 }
    //             }
    //         }
    //     }
    //     List<List<Integer>> ans = new ArrayList(set);
    //     return ans;
    // }
}

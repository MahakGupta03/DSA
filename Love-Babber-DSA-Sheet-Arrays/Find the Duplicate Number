/*
let array be [1,3,4,2,2] then the cycle created will be 1->3->2->4->2
  TC-> O(N)
  SC-> O(1)
*/

 /* OPTIMIZED */
public int findDuplicate(int[] nums) {
       int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        
        fast = nums[0];
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }

/*---------Better----- */ 
public int findDuplicate(int[] nums) {
        // int n = nums.length;
        // int arr[] = new int[n+1];
        // for(int i=0;i<n;i++){
        //     if(arr[nums[i]]>=1){
        //         return nums[i];
        //     }
        //     else{
        //         arr[nums[i]]++;
        //     }
        // }
        // return 0;
    }

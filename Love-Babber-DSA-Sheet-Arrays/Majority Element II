        /* OPTIMAL ( Mooreâ€™s Voting Algorithm)
            TC-> O(n)
            SC-> O(1)
         */
        //is problem me sirf 2 element hi honge jinka count n/3 se zada hoga 
        int n = nums.length;
        int count1 =0;
        int count2 = 0;
        int el1 = Integer.MIN_VALUE;
        int el2 = Integer.MIN_VALUE;
        List<Integer> ans = new ArrayList<>();
        //check for elements(max 2) which are going to be in the majority
        for(int i=0;i<n;i++){
            if(count1==0 && el2!=nums[i]){
                el1 = nums[i];
                count1=1;
            }
            else if(count2==0 && el1!=nums[i]){
                el2=nums[i];
                count2=1;
            }
            else if(el1==nums[i]) count1++;
            else if(el2==nums[i]) count2++;
            else{
                count1--;
                count2--;
            }
        }
        //we get 2 elements from here which can be more in count then n/3
        count1=0;
        count2=0;
        for(int i=0;i<n;i++){
            if(nums[i]==el1) count1++;
            if(nums[i]==el2) count2++;
        }
        if(count1>n/3) ans.add(el1);
        if(count2>n/3) ans.add(el2);
        return ans;



        /* BETTER 
            TC-> O(n)
            SC-> O(1)
         */
        List<Integer> list = new ArrayList<>();
        int n = nums.length;
        Map<Integer,Integer> map = new HashMap<>();
        for(int i : nums){
            map.put(i,map.getOrDefault(i,0)+1);
        }
        for(int key : map.keySet()){
            if(map.get(key)>n/3){
                list.add(key);
            }
        }
        return list;



        /*BRUTE FORCE
            TC-> O(n^2)
        */
        List<Integer>ans = new ArrayList<>();
        int n = nums.length;
        for(int i=0; i<n; i++){
            int count = 1;
            for(int j=i+1; j<n; j++){
                if(nums[i]==nums[j]){
                    count++;
                }
            }
            if(count>n/3 && !ans.contains(nums[i])){
                ans.add(nums[i]);
            }
        }
        return ans;

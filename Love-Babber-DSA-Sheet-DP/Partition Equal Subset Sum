 /* MEMOIZATION */
/*
  TC-> O(N*target) + O(N) (There are N*K states therefore at max ‘N*K’ new problems will be solved and we are running a for loop for ‘N’ times                              to calculate the total sum)
  SC-> O(N*target) + O(N)
*/
    public boolean func(int idx, int target, int nums[],int dp[][]){
        if(target==0) return true;
        if(idx==0) return nums[idx]==target;
        if(dp[idx][target]!=-1) {
            return dp[idx][target]==1 ? true : false;
        }
        boolean notTake = func(idx-1,target,nums,dp);
        boolean take = false;
        if (nums[idx]<=target){
            take=func(idx-1,target-nums[idx],nums,dp);
        }
        dp[idx][target] = take || notTake ? 1 : 0;
        return take || notTake;
        
    }

    public boolean canPartition(int[] nums) {

        int n = nums.length;
        int sum = 0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(sum%2!=0) return false;
        int target=sum/2;
        int dp[][] = new int[n][target+1];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        return func(n-1,target,nums,dp);
}

/* TABULATION */
/*
  TC-> O(N*target) + O(N) (There are N*K states therefore at max ‘N*K’ new problems will be solved and we are running a for loop for ‘N’                                  times to calculate the total sum)
  SC-> O(N*target)
*/
 public boolean func(int idx, int target, int nums[],int dp[][]){
        int n = nums.length;
        int sum = 0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(sum%2!=0) return false;
        int actualTarget=sum/2;
        boolean dp[][] = new boolean[n][actualTarget+1];
        for(int i=0;i<n;i++){
            dp[i][0]= true;
        }
        if(nums[0]<=actualTarget){
            dp[0][nums[0]] = true;
        }
        for(int idx=1;idx<n;idx++){
            for(int target=1;target<=actualTarget;target++){
                boolean notTake = dp[idx-1][target];
                boolean take = false;
                if (nums[idx]<=target){
                    take=dp[idx-1][target-nums[idx]];
                }
                dp[idx][target] = take || notTake ;
            }
        }
        return dp[n-1][actualTarget];
}

/* SPACE OPTIMIZATION */
/*
  TC-> O(N*target) + O(N) (There are N*K states therefore at max ‘N*K’ new problems will be solved and we are running a for loop for ‘N’                                  times to calculate the total sum)
  SC-> O(target)
*/
 public boolean func(int idx, int target, int nums[],int dp[][]){
        int n = nums.length;
        int sum = 0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(sum%2!=0) return false;
        int actualTarget=sum/2;
        boolean prev[] = new boolean[actualTarget+1];
        
        prev[0]= true;
        
        if(nums[0]<=actualTarget){
            prev[nums[0]] = true;
        }
        for(int idx=1;idx<n;idx++){
            boolean curr[] = new boolean[actualTarget+1];
            curr[0]=true;
            for(int target=1;target<=actualTarget;target++){
                boolean notTake = prev[target];
                boolean take = false;
                if (nums[idx]<=target){
                    take=prev[target-nums[idx]];
                }
                curr[target] = take || notTake ;
            }
            prev = curr;
        }
        return prev[actualTarget];
        
    }

//MEMOIZATION
    public int getMax(int idx, int buy, int k, int prices[], int dp[][][]){
        if(idx==prices.length || k==0) return 0;
        if(dp[idx][buy][k]!=-1) return dp[idx][buy][k];
        int profit = 0;
        if(buy==1){
            profit = Math.max(-prices[idx]+getMax(idx+1, 0, k, prices, dp), 0+getMax(idx+1, 1, k, prices, dp));
        }
        else{
            profit = Math.max(prices[idx]+getMax(idx+1, 1, k-1, prices, dp), 0+getMax(idx+1, 0, k, prices, dp));
        }
        return dp[idx][buy][k] = profit;
    }

    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n+1][2][k+1];
        // for(int i=0;i<=n;i++){
        //     for(int j=0;j<2;j++){
        //         Arrays.fill(dp[i][j], -1);
        //     }
        // }
        // return getMax(0, 1, k, prices, dp);

//TABULATION
    /* below is the base conditions but since in java when array is initialised it has all values already as 0 so no need of base condition */
        // //for cap = 0, idx and buy can be anything
        // for(int idx=n-1;idx>=0;idx--){
        //     for(int buy= 0; buy<=1;buy++){
        //         dp[idx][buy][0] = 0;
        //     }
        // }
        // // for idx = n, buy and cap can be anything
        // for(int buy=0;buy<=1;buy++){
        //     for(int cap= 1; cap<=k;cap++){  //for cap = 0 dp has value 0
        //         dp[n][buy][cap] = 0;
        //     }
        // }

        for(int idx=n-1;idx>=0;idx--){
            for(int buy= 0; buy<=1;buy++){
               for(int cap= 1; cap<=k;cap++){ 
                    int profit = 0;
                    if(buy == 1){
                        profit = Math.max(-prices[idx] + dp[idx+1][0][cap], 0 + dp[idx+1][1][cap]);
                    }
                    else{
                        profit = Math.max(prices[idx] + dp[idx+1][1][cap-1], 0 + dp[idx+1][0][cap]);
                    }
                    dp[idx][buy][cap] = profit;
                } 
            }
        }
        return dp[0][1][k];

    }

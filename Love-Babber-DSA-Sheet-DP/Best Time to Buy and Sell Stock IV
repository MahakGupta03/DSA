//MEMOIZATION
    public int getMax(int idx, int buy, int k, int prices[], int dp[][][]){
        if(idx==prices.length || k==0) return 0;
        if(dp[idx][buy][k]!=-1) return dp[idx][buy][k];
        int profit = 0;
        if(buy==1){
            profit = Math.max(-prices[idx]+getMax(idx+1, 0, k, prices, dp), 0+getMax(idx+1, 1, k, prices, dp));
        }
        else{
            profit = Math.max(prices[idx]+getMax(idx+1, 1, k-1, prices, dp), 0+getMax(idx+1, 0, k, prices, dp));
        }
        return dp[idx][buy][k] = profit;
    }

    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n+1][2][k+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<2;j++){
                Arrays.fill(dp[i][j], -1);
            }
        }
        return getMax(0, 1, k, prices, dp);
    }

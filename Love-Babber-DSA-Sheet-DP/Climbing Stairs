public int climbStairs(int n) {
 /* optimized space */
        if(n==0) return 0;
        if(n==1) return 1;
        if(n==2) return 2;
        int prev2 = 1;
        int prev = 2;
        for(int i=3;i<=n;i++){
            int curr = prev+prev2;
            prev2 = prev;
            prev = curr;
        }
        return prev;
}




public int climbStairs(int []dp, int n){

        /* using memoization */

         if(n==0 || n==1) return 1;
         if(dp[n]!=-1) return dp[n];
         int one = climbStairs(dp, n-1);
         int two = climbStairs(dp, n-2);
         return dp[n]= one + two;
    }

public int climbStairs(int n) {
        int dp[] = new int[n+1];
        Arrays.fill(dp,-1);
        return climbStairs(dp, n);

    }

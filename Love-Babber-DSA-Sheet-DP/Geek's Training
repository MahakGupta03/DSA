PROBLEM LINK: https://www.geeksforgeeks.org/problems/geeks-training/1

/*MEMOIZATION*/
/*
  TC-> O(N*4*3)  (There are N*4 states and for every state, we are running a for loop iterating three times.) 
  SC-> O(N) + O(N*4)  (We are using a recursion stack space(O(N)) and a 2D array (again O(N*4)). Therefore total space complexity will be O(N) +                           O(N) â‰ˆ O(N))
*/

//last task ka matlb h konsa task uske pehle kra tha on (day+1)
    public int func(int day, int last, int points[][],int dp[][]){
        if(day==0){
            // day 0 se upr kuch nhi h to day 0 k tasks mese maximum point wala task nikalna h
            int maxi = 0;
            for(int i=0;i<3;i++){
                if(i!=last){
                    maxi = Math.max(maxi,points[day][i]);
                }
            }
            return maxi;
        }
        if(dp[day][last]!=-1) return dp[day][last];
        int maxi = 0;
        for(int i=0;i<3;i++){
            // particular day k sare task (except last) se day-1 k sare task (except last) ko sum krke check krna  konsa maximum h 
            if(i!=last){
                int point = points[day][i] + func(day-1,i,points,dp);
                maxi = Math.max(maxi,point);
            }
        }
        return dp[day][last]=maxi;
    }
    public int maximumPoints(int points[][],int N){
        //code here
        int dp[][] = new int[N][4];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        return func(N-1,3,points,dp);
    }

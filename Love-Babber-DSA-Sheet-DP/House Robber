public int f(int idx, int []nums ,int dp[] ){
        if(idx==0) return nums[idx];
        if(idx<0) return 0;
        if(dp[idx]!=-1) return dp[idx];
        int pick = nums[idx] + f(idx-2, nums,dp);
        int notpick = 0+f(idx-1, nums,dp);
        return dp[idx]=Math.max(pick, notpick); 
    }


    public int rob(int[] nums) {
    /* MEMOIZATION 
        TC->O(n)
        SC->O(n) + O(n) FOR STACK SPACE AND DP ARRAY
    */
         int n = nums.length;
         int dp[] = new int[n+1];
         Arrays.fill(dp,-1);
         return f(n-1,nums,dp);

}
public int rob(int[] nums) {

    /* TABULATION
        TC->O(n)
        SC->O(n)
     */
         int n = nums.length;
         int dp[] = new int[n+1];
         dp[0] = nums[0];
         int take=0,nottake=0;
         for(int i=1;i<n;i++){
             take = nums[i];
             if(i>1) take+=dp[i-2];
             nottake = 0+dp[i-1];
             dp[i] = Math.max(take,nottake);
         }

         return dp[n-1];

}


public int rob(int[] nums) {
    /* SPACE OPTIMIZATION
        TC->O(n)
        SC->O(1)
     */
        int n = nums.length;
        int prev = nums[0];
        int prev2 = 0;
        for(int i=1;i<n;i++){
            int take = nums[i];
            if(i>1) take+=prev2;
            int nottake = 0+prev;
            int curr = Math.max(take,nottake);
            prev2 = prev;
            prev = curr;
        }

        return prev;
        
                
    }

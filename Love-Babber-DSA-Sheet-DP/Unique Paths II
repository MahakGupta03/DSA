 /* MEMOIZATION(TOP-DOWN) 
        TC->O(M*N)
        SC-> O((N-1)+(M-1)) + O(M*N)
*/

public int path(int i,int j,int arr[][], int dp[][]){
        //if we went out of grid or there is an obstacle at any any place then then this is not the path
        if(i<0 || j<0 || arr[i][j]==1) return 0;
        if(i==0 && j==0 ) return 1;
        if(arr[i][j]==1) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int up = path(i-1,j,arr,dp);
        int left = path(i,j-1,arr,dp);
        return dp[i][j] = up+left;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int dp[][] = new int[n][m];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        return path(n-1,m-1,obstacleGrid,dp);

    }

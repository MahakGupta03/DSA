/*MEMOIZATION*/
/*
  TC-> O(N*M)
  SC-> O(N*M) + O(N+M)
*/
public int longestSubsequence(int i, int j, String text1, String text2, int dp[][]){
        if(i==0 || j==0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
//if elements are equal then we found 1 subsequence and find for greater sunsequence from(0 to i-1)
        if(text1.charAt(i-1)==text2.charAt(j-1)){
            return dp[i][j] = 1 + longestSubsequence(i-1,j-1,text1,text2,dp);
        }
//if elemets are not equal then no subsequence and we move each turnwise
        return dp[i][j] = Math.max(longestSubsequence(i-1,j,text1,text2,dp),longestSubsequence(i,j-1,text1,text2,dp));
}

    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int dp[][] = new int[n+1][m+1];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }        
        return longestSubsequence(n,m,text1,text2,dp);


/* TABULATION */
/*
  TC-> O(N*M)
  SC-> O(N*M)
*/
public int longestCommonSubsequence(String text1, String text2) {
       for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        for(int j=0;j<=m;j++){
            dp[0][j]=0;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else {
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
}



/* SPACE OPTIMIZED */
/*
  TC-> O(N*M)
  SC-> O(M)
*/
public int longestCommonSubsequence(String text1, String text2) {
        int prev[] = new int[m+1];
        int curr[] = new int[m+1];
        for(int j=0;j<=m;j++){
            prev[j]=0;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1)){
                    curr[j] = 1 + prev[j-1];
                }
                else {
                    curr[j] = Math.max(prev[j],curr[j-1]);
                }
            }
            prev = (int[]) (curr.clone());
        }
        return prev[m];

        
}

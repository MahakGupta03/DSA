/*MEMOIZATION*/
/*
  TC-> O(N*N)
  SC-> O(N*N) + RECURSION STACK SPACE
*/

//is apporach me hum uper se niche hr row ko traverse krte h. Current row k element ko next row k i or i+1 se add krte h or minimum wale ko store krte h

public int minSum(int i, int j, List<List<Integer>> triangle, int n, int dp[][]) {
        if (i == n - 1)
            return triangle.get(n - 1).get(j);
        if (dp[i][j] != -1)
            return dp[i][j];
        int down = triangle.get(i).get(j) + minSum(i + 1, j, triangle, n, dp);
        int diagonal = triangle.get(i).get(j) + minSum(i + 1, j + 1, triangle, n, dp);
        return dp[i][j] = Math.min(down, diagonal);
    }
public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int dp[][] = new int[n][n];
        for(int row[] : dp){
        Arrays.fill(row,-1);
        }
        return minSum(0,0,triangle,n,dp);
}

/* TABULATION */
/*
  TC-> O(N*N)
  SC-> O(N*N)
*/
public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int dp[][] = new int[n][n];
        for(int j=0;j<n;j++){
        dp[n-1][j] = triangle.get(n-1).get(j);
        }
        for(int i=n-2;i>=0;i--){
        for(int j=i;j>=0;j--){
        int down = triangle.get(i).get(j) + dp[i+1][j];
        int diagonal = triangle.get(i).get(j) + dp[i+1][j+1];
        dp[i][j] = Math.min(down,diagonal);
        }
        }
        return dp[0][0];
}

/*SPACE OPTIMIZATION*/
/*
  TC-> O(N*N)
  SC-> O(N)
*/
public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int front[] = new int[n];
        for (int j = 0; j < n; j++) {
            front[j] = triangle.get(n - 1).get(j);
        }
        for (int i = n - 2; i >= 0; i--) {
            int curr[] = new int[i + 1];
            for (int j = i; j >= 0; j--) {
                int down = triangle.get(i).get(j) + front[j];
                int diagonal = triangle.get(i).get(j) + front[j + 1];
                curr[j] = Math.min(down, diagonal);
            }
            front = curr;
        }
        return front[0];
    }

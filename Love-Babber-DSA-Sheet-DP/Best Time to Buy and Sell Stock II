/*MEMOIZATION*/
/*
  TC-> O(N X 2) 
  SC-> O(N X 2) + O(N)
*/
public int generateProfit(int idx, int buy, int prices[],int dp[][]){
        if(idx==prices.length) return 0;
        if(dp[idx][buy]!=-1) return dp[idx][buy];
        int profit = 0;
        if(buy==1){
            profit = Math.max(-prices[idx] + generateProfit(idx+1, 0, prices,dp), 0 + generateProfit(idx+1, 1, prices,dp));
        }
        else{
            profit = Math.max(prices[idx] + generateProfit(idx+1, 1, prices,dp), 0 + generateProfit(idx+1, 0, prices,dp));
        }
        return dp[idx][buy] = profit;
    }

/*TABULATION*/
/*
  TC-> O(N X 2) 
  SC-> O(N X 2)
*/
    public int generateProfit(int prices[],int dp[][]){
        dp[prices.length][0] = 0;
        dp[prices.length][1] = 0;
        int profit = 0;
        for(int idx =prices.length-1; idx>=0;idx--){
            for( int buy=0;buy<=1;buy++){
                if(buy==1){
                    profit = Math.max(-prices[idx] + dp[idx+1][0], 0 + dp[idx+1][1]);
                }
                else{
                    profit = Math.max(prices[idx] + dp[idx+1][1], 0 + dp[idx+1][0]);
                }
                dp[idx][buy] = profit;
            }
            
        }
        return dp[0][1];
    }



/*SPACE OPTIMIZATION*/
/*
  TC-> O(N X 2) 
  SC-> O(1)
*/
    public int generateProfit(int prices[],int dp[][]){
        int ahead[] = new int[2];
        int curr[] = new int [2];
        int profit = 0;
        for(int idx =prices.length-1; idx>=0;idx--){
            for( int buy=0;buy<=1;buy++){
                if(buy==1){
                    profit = Math.max(-prices[idx] + ahead[0], 0 + ahead[1]);
                }
                else{
                    profit = Math.max(prices[idx] + ahead[1], 0 + ahead[0]);
                }
                curr[buy] = profit;
            }
            ahead = curr;
            
        }
        return ahead[1];
    }
    

    public int maxProfit(int[] prices) {
        // int dp[][] = new int[prices.length][2];
        int dp[][] = new int[prices.length+1][2];

        // for(int row[] : dp){
        //     Arrays.fill(row,-1);
        // }
        // return generateProfit(0, 1, prices,dp);
        return generateProfit(prices,dp);
        
    }

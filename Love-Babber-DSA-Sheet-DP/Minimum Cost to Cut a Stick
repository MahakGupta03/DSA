/*MEMOIZATION*/
/*
  TC-> O(N*N*N)
  SC-> O(N*N) + O(N)
*/
public int func(int i, int j, ArrayList<Integer> list, int dp[][]){
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int mini = Integer.MAX_VALUE;
        for(int k=i; k<=j;k++){
            int cost = (list.get(j+1) - list.get(i-1)) + func(i,k-1,list,dp)  + func(k+1,j,list,dp);
            mini = Math.min(mini,cost);
        }
        return dp[i][j] = mini;
    }

    public int minCost(int n, int[] cuts) {
        int c = cuts.length;
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0;i<c;i++){
            list.add(cuts[i]);
        }
        int dp[][] = new int[c+1][c+1];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        list.add(0,0);
        list.add(n);
        Collections.sort(list);
        return func(1,c,list,dp);
        
    }

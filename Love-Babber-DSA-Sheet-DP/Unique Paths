public int f(int i, int j, int [][]dp){
        //agr robot (0,0) pr h to ek path cover ho gya
        if(i==0 && j==0) return 1;
        //agr travel krte krte vo matrix se bahar chale jaye to vo path count nhi hoga
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        //apn ne last index se start kra to down or right ki jagah up or left move krenge
        int up = f(i-1,j,dp);
        int left = f(i,j-1,dp);
        return dp[i][j]=up+left; 
    }

    /* MEMOIZATION(TOP-DOWN) 
        TC->O(M*N)
        SC-> O((N-1)+(M-1)) + O(M*N)
    */
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        return f(m-1, n-1,dp);
    }



 public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        /* TABULATION (BOTTOM-TOP)
            TC->O(M*N)
            SC->O(M*N) (NO RECURSSION STACK)
         */
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) {
                    dp[i][j]=1;
                    continue;   
                }
                else{
                    int up=0;
                    int left=0;
                    if(i>0) up=dp[i-1][j];
                    if(j>0) left = dp[i][j-1];
                    dp[i][j]=up+left;
                }
            }
        }
        return dp[m-1][n-1];
    }

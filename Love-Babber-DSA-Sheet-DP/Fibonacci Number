public int fibo(int n, int dp[]){
        if(n<=1) return n;
        if(dp[n]!=-1) return dp[n];
        int prev = fib(n-1);
        int prev2 = fib(n-2);
        return dp[n]=prev+prev2;
    }
    public int fib(int n) {
        /* TOP DOWN(MEMOIZATION) */
        // int dp[] = new int[n+1];
        // Arrays.fill(dp,-1);
        // return fibo(n,dp);

    /* BOTTOM UP(TABULATION) */
        // int dp[] = new int[n+1];
        // if(n<=1) return n;
        // dp[0]=0;
        // dp[1] = 1;
        // for(int i=2;i<=n;i++){
        //     dp[i] = dp[i-1] + dp[i-2];
        // }
        // return dp[n];

    /* SAPCE OPTIMIZATION */
        if(n<=1) return n;
        int prev2=0,prev = 1;
        for(int i=2;i<=n;i++){
            int curr = prev2+prev;
            prev2 = prev;
            prev = curr;
        }
        return prev;

        
    }

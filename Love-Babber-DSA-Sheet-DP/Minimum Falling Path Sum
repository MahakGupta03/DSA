/* MEMOIZATION */
/*
  TC->O(N*M) (M for different number of columns than rows)
  SC-> //recursion space O(N) + O(N*M)
*/
    public int minFallPathSum(int i, int j, int matrix[][], int n, int dp[][]){
        if(j>n-1 || j<0) return (int) Math.pow(10, 9);
        if(i==0) return matrix[0][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int left = matrix[i][j] + minFallPathSum(i-1,j-1,matrix,n,dp);
        int down = matrix[i][j] + minFallPathSum(i-1,j,matrix,n,dp);
        int right = matrix[i][j] + minFallPathSum(i-1,j+1,matrix,n,dp);
        return dp[i][j] = Math.min(left,(Math.min(down,right)));
    }

    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int mini = Integer.MAX_VALUE;
        int dp[][] = new int[n][n];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        for(int j=0;j<n;j++){
            mini = Math.min(mini ,minFallPathSum(n-1,j,matrix,n,dp));
        }
        return mini;
}

/*TABULATION*/
/*
  TC->O(N*M) (M for different number of columns than rows)
  SC->O(N*M)
*/
 public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int mini = Integer.MAX_VALUE;
        int dp[][] = new int[n][n];
        for(int j=0;j<n;j++){
            dp[0][j] = matrix[0][j];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<n;j++){
                int up = matrix[i][j] + dp[i-1][j];
                int right = matrix[i][j];
                if(j+1<n) {
                    right += dp[i-1][j+1];
                }else {
                    right += (int) Math.pow(10, 9);
                }
                int left = matrix[i][j];
                if(j-1>=0) {
                    left +=dp[i-1][j-1];
                }
                else {
                    left += (int) Math.pow(10, 9);
                }
                dp[i][j] = Math.min(left,(Math.min(up,right)));
            }

        }
        for (int j = 0; j < n; j++) {
            mini = Math.min(mini, dp[n-1][j]);
        }

        return mini;
}


/*SPACE OPTIMIZED*/
/*
  TC->O(N*M) (M for different number of columns than rows)
  SC->O(N)
*/
 public int minFallingPathSum(int[][] matrix) {
      int n = matrix.length;
      int front[] = new int[n];
        for(int j=0;j<n;j++){
            front[j] = matrix[0][j];
        }
        for(int i=1;i<n;i++){
            int curr[] = new int[n];
            for(int j=0;j<n;j++){
                int up = matrix[i][j] + front[j];
                int right = matrix[i][j];
                if(j+1<n) {
                    right += front[j+1];
                }else {
                    right += (int) Math.pow(10, 9);
                }
                int left = matrix[i][j];
                if(j-1>=0) {
                    left +=front[j-1];
                }
                else {
                    left += (int) Math.pow(10, 9);
                }
                curr[j] = Math.min(left,(Math.min(up,right)));
            }
            front = curr;

        }
        int mini = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            mini = Math.min(mini, front[j]);
        }

        return mini;
    }  

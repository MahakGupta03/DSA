/*MEMOIZATION*/
public int f(int i, int j, String word1, String word2,int dp[][]){
        //Base case(for 0 based indexing)
        if(i<0) return j+1;
        if(j<0) return i+1;
        //Base case (for 1 based indexing)
        // if(i==0) return j;
        // if(j==0) return i;
        if(dp[i][j]!=-1) return dp[i][j];
        if(word1.charAt(i)==word2.charAt(j)) return dp[i][j] = 0 + f(i-1, j-1,word1, word2,dp);
        //intertion
        //int ins = 1+f(i, j-1, word1, word2,dp);
        //deletion
        //int del = 1 + f(i-1, j, word1, word2,dp);
        //replacing
        //int rep = 1 + f(i-1, j-1, word1, word2,dp);
        //return dp[i][j] = Math.min(rep, Math.min(ins,del));
        return dp[i][j] = 1 + Math.min(f(i-1, j-1, word1, word2,dp), Math.min(f(i, j-1, word1, word2,dp),f(i-1, j, word1, word2,dp)));
    }

    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        //for 0 based indexing
        int dp[][] = new int [n][m];
        for 1 based indexing
        int dp[][] = new int [n+1][m+1];
        for(int row[] : dp)
            Arrays.fill(row,-1);
        return f(n-1, m-1, word1, word2,dp);
    }
/*TABULATION*/

public int f(int n, int m, String word1, String word2,int dp[][]){
        //Base case
        // if(i==0) return j;
        // if(j==0) return i;
        for(int i=0;i<=word1.length();i++) dp[i][0]=i;
        for(int j=0;j<=word2.length();j++) dp[0][j] = j;
        for(int i=1;i<=word1.length();i++){
            for(int j=1;j<=word2.length();j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j] = 0 + dp[i-1][j-1];
                }
                else{
                    dp[i][j] =1+ Math.min(dp[i-1][j-1], Math.min(dp[i][j-1],dp[i-1][j]));
                }
            }
        }
        return dp[n][m];
        
    }
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        // int dp[][] = new int [n][m];
        int dp[][] = new int [n+1][m+1];
        // for(int row[] : dp)
        //     Arrays.fill(row,-1);
        return f(n, m, word1, word2,dp);

    }

/* SPACE OPTIMIZATION */
    public int f(int n, int m, String word1, String word2,int dp[][]){
        int prev[] = new int[m+1];
        int curr[] = new int[m+1];
        for(int j=0;j<=word2.length();j++) prev[j] = j;
        for(int i=1;i<=word1.length();i++){
            curr[0] = i;
            for(int j=1;j<=word2.length();j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    curr[j] = 0 + prev[j-1];
                }
                else{
                    curr[j] =1+ Math.min(prev[j-1], (Math.min(curr[j-1],prev[j])));
                }
            }
            prev = (int[]) (curr.clone());;
        }
        return prev[m];
        
    }
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        // int dp[][] = new int [n][m];
        int dp[][] = new int [n+1][m+1];
        // for(int row[] : dp)
        //     Arrays.fill(row,-1);
        return f(n, m, word1, word2,dp);

    }

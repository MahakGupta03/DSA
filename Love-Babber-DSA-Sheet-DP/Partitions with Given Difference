/*MEMOIZATION*/
/*
  TC-> O(N*K)
  SC-> O(N*K) + O(N)
*/
    int mod = (int) (Math.pow(10,9)+7);
    public int findWays(int i, int k, int arr[],int dp[][]){
        // if(k==0) return 1;
        // if(i==0) return arr[0]==k ? 1: 0;
        if(i == 0){
            if(k==0 && arr[0]==0)
                return 2;
            if(k==0 || k == arr[0])
                return 1;
            return 0;
    }
        if(dp[i][k]!=-1) return dp[i][k];
        int notTake = findWays(i-1,k,arr,dp);
        int take = 0;
        if(arr[i]<=k){
            take = findWays(i-1,k-arr[i],arr,dp);
        }
        return dp[i][k]=(take+notTake)%mod;
    }

    public int countPartitions(int n, int d, int arr[]){
        //isme s2-s1 = d hona chahiye uske liye hum array ka totoal sum nikalenge or usme se s2 minus krenge to s1 aa jayega(s1 = totalSum=s2).
        //i.e totalSum-s2-s2 = d. hence s2 = (totalSum-d)/2. hence we have to get all subsequence for s2.
        int totalSum = 0;
        for(int i=0;i<n;i++){
            totalSum+=arr[i];
        }
        if(totalSum-d<0 || (totalSum-d)%2!=0) return 0;
        int s2 = (totalSum-d)/2;
        int dp[][] = new int[n][s2+1];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }
        return findWays(n-1,s2,arr,dp);
    }

/*
    TC-> O(3*N) as we are traversing through the array only once. And O(2*N) for computing prefix and suffix array.
    sc-> O(N)+O(N) for prefix and suffix arrays.
*/

public int trap(int[] height) {
        int n = height.length;
        //prefix stores max height towards left
        int prefix[] = new int[n];
        //sufix stores max height towards right
        int sufix[] = new int[n];
        int maxi = height[0];
        for(int i=0;i<n;i++){
            maxi = Math.max(maxi,height[i]);
            prefix[i] = maxi;
        }
        maxi = height[n-1];
        for(int i=n-1;i>=0;i--){
            maxi = Math.max(maxi,height[i]);
            sufix[i] = maxi;
        }
        int ans = 0;
        for(int i=0;i<n;i++){  //take minimum from prefix and suffix array and subtract the current height to get the amount of water filled
            ans+= Math.min(prefix[i],sufix[i]) - height[i];
        }
        return ans;
    }

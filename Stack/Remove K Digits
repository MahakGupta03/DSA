 /*agr koi digit stack k top elemtnt se chota h to top element ko remove krte 
    jao or fir current element kopush krdo. */
    public String removeKdigits(String num, int k) {
        Stack<Character> st = new Stack<>();
        for(int i=0;i<num.length();i++){
            char ch = num.charAt(i);
            while(st.size()>0 && k>0 && st.peek()>ch){
                st.pop();
                k--;
            }
            st.push(ch);
        }
        /* agr sare digit traverse krne k bd bhi k bada ho 0 se to last se element remove krte jao */
        while(!st.isEmpty() && k>0){
            st.pop();
            k--;
        }
        // char ans[] = new char[st.size()];
        // int i = ans.length-1;
        // while(!st.isEmpty() && i>=0) ans[i--] = st.pop();
        // int d=0;
        // while(d<ans.length && ans[d]=='0') d++;
        // StringBuilder sb = new StringBuilder();
        // while(d<ans.length) sb.append(ans[d++]); 
        // if(sb.length()==0) sb.append("0");
        // return sb.toString();

        StringBuilder sb = new StringBuilder();
        while(!st.isEmpty()) sb.append(st.pop());
        sb.reverse();
        /* agr leading zero ho to usko remove krdo */
        while(sb.length()>0 && sb.charAt(0)=='0'){
            sb.deleteCharAt(0);
        }
        /* agr sare element remove ho gaye to last me 0  ans hoga*/
        if(sb.length()==0) sb.append("0");
        return sb.toString();
    }

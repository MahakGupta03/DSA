public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        /*nums 2 me piche se move krte aao or jb tk elements equal na mile 
        tb tk stack me add kro . age element equal mil jata h to stack me ek ek 
        krke element remove krte jao jb tk usse bda element nhi mil jata*/
        int n1 = nums1.length;
        int n2 = nums2.length;
        int ans[] = new int[n1];
        Stack<Integer> s = new Stack<>();
        for(int i=0;i<n1;i++){
            for(int j=n2-1;j>=0;j--){
                if(nums1[i]==nums2[j]){
                    if(s.isEmpty()){
                        ans[i]=-1;
                    }
                    else if(s.size()>0 && s.peek()>nums1[i]){
                        ans[i]=s.peek();
                    }
                    else if(s.size()>0 && s.peek()<=nums1[i]){
                        while(!s.isEmpty() && s.peek()<=nums1[i]){
                            s.pop();
                        }
                        if(s.isEmpty()){
                            ans[i]=-1;
                        }else{
                            ans[i]=s.peek();
                        }
                    }

                }
                s.push(nums2[j]);
            }
            while(!s.isEmpty()){
                s.pop();
            }
        }
        return ans;

// ------Apporach 2---
        int n1 = nums1.length;
        int n2 = nums2.length;
        int ans[] = new int[n1];
        Stack<Integer> s = new Stack<>();
        for(int i=0;i<n1;i++){
            for(int j=n2-1;j>=0;j--){
                if(nums1[i]==nums2[j]){
                    while(!s.isEmpty() && s.peek()<=nums1[i]){
                        s.pop();
                    }
                    if(!s.isEmpty()) ans[i]=s.peek();
                    else ans[i]=-1;
                
                
                }
                s.push(nums2[j]);
            }
            while(!s.isEmpty()){
                s.pop();
            }
        }
        return ans;

    }

class Solution {
    /* is me hum ek hashmap bnate h jo original node k corresponding copy node 
    rakhta h fir hum head se start krte h or original node se compare krte krte duplicate
    list bnate h */

    // public Node copyRandomList(Node head) {
    //     HashMap<Node, Node> map = new HashMap<>();
    //     Node temp = head;
    //     while(temp!=null){
    //         Node newNode = new Node(temp.val);
    //         map.put(temp, newNode);
    //         temp = temp.next;
    //     }
    //     temp = head;
    //     while(temp!=null){
    //         Node copyNode = map.get(temp);
    //         copyNode.next = map.get(temp.next);
    //         copyNode.random = map.get(temp.random);
    //         temp = temp.next;
    //     }

    //     return map.get(head);


//OPTIMIZED SPACE
/* is me hum pehle hr node k bich me ek node lagayenge jo duplicate hogi, 
fir unke random pointers kko set krenge or fir next pointers ko */
    public void insertCopyBetween(Node head){
        Node temp = head;
        while(temp!=null){
            Node newNode = new Node(temp.val);
            newNode.next = temp.next;
            temp.next = newNode;
            temp = temp.next.next;
        }
    }

    public void connectRandomPointer(Node head){
        Node temp = head;
        while(temp!=null){
            Node copyNode = temp.next;
            if(temp.random!=null){
                copyNode.random = temp.random.next;
            }
            else{
                copyNode.random = null;
            }
            temp = temp.next.next;
        }
    }

    public Node getDeepCopyList(Node head){
        Node dummy = new Node(-1);
        Node temp = head;
        Node res = dummy;
        while(temp!=null){
            res.next = temp.next;
            temp.next =  temp.next.next;
            res = res.next;
            temp=temp.next;
        }
        return dummy.next;
    }

    public Node copyRandomList(Node head) {
        insertCopyBetween(head);
        connectRandomPointer(head);
        return getDeepCopyList(head);
    }
}

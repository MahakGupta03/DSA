 public boolean isPalindrome(ListNode head) {
        
        /*----BRUTE FORCE----*/ LOGIC: (Create an array and put all values in it and then check for palindrome)
        
        // ArrayList<Integer> list = new ArrayList<>();
        // ListNode curr = head;
        // while(curr!=null){
        //     list.add(curr.val);
        //     curr = curr.next;
        // }
        // int n = list.size();
        // for(int i=0;i<n/2;i++){
        //     if(list.get(i) != list.get(n-1-i)) return false;;
        // }
        // return true;
        
        
        
        /*----OPTIMIZED----*/    
        /* LOGIC: 1. find the middle node of list.
                  2. reverse the right path of middle node. 
                  3. then check for equel elements. */
                  
         if(head==null || head.next == null) return true;
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        
        slow = slow.next;
        slow = reverseList(slow);
        while(slow!=null){
            if(head.val!=slow.val) return false;
            head = head.next;
            slow = slow.next;
        }
        return true;
        
    }
      public ListNode reverseList(ListNode head) {
        
        ListNode curr = head;
          ListNode prev = null;
          while(curr!=null){
              ListNode nxt = curr.next;
              curr.next = prev;
              prev = curr;
              curr = nxt;
          }
          head = prev;
          return head;
    }

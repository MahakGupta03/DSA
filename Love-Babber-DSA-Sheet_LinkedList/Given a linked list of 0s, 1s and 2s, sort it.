/*OPTIMIZED*/
/*
  TC-> O(N)
  SC->O(1)
*/
static Node segregate(Node head)
    {
        if(head==null || head.next==null) return head;
        Node temp = head;
        Node zeroHead = new Node(-1);
        Node oneHead = new Node(-1);
        Node twoHead = new Node(-1);
        Node zero = zeroHead, one = oneHead, two = twoHead;
       
        while(temp!=null){
            if(temp.data==0){
                zero.next=temp;
                zero = temp;
            }
            else if(temp.data==1){
                one.next=temp;
                one = temp;
            }
            else{
                two.next=temp;
                two = temp;
            }
            temp=temp.next;
        }
        zero.next = (oneHead.next!=null)? (oneHead.next) : (twoHead.next);
        one.next = twoHead.next;
        two.next = null;
        head = zeroHead.next;
        return head; 
    }

/*BRUTE FORCE*/
/*
  TC-> O(2N)
  SC-> O(1)
*/
static Node segregate(Node head)
    {
        int count0=0;
        int count1=0;
        int count2=0;
        Node temp = head;
        while(temp!=null){
            if(temp.data==0) count0++;
            else if(temp.data==1) count1++;
            else count2++;
            temp=temp.next;
            
        }
        temp = head;
        while(temp!=null){
            if(count0>0){
                count0--;
                temp.data = 0;
            }
            else if(count1>0){
                count1--;
                temp.data = 1;
            }
            else if(count2>0){
                count2--;
                temp.data = 2;
            }
            temp=temp.next;
        }
        return head;     
        
    }

/*MYSELF*/
public static ArrayList sort012(ArrayList<Integer> list){
        int start = 0;
        int end = list.size()-1;
        int i=0;
        while(i<=end){
            if(list.get(i)==0){
                Collections.swap(list, i, start);
                start++;
                i++;

            }
            else if(list.get(i)==2){
                Collections.swap(list, i, end);
                end--;

            }
            else{
                i++;
            }
        }
        return list;
    }
    
    static Node segregate(Node head)
    {
        // add your code here
        Node temp = head;
        ArrayList<Integer> list = new ArrayList<>();
        while(temp!=null){
            list.add(temp.data);
            temp=temp.next;
        }
        list = sort012(list);
        temp=head;
        int i=0;
        while(temp!=null){
            temp.data=list.get(i);
            temp=temp.next;
            i++;
        }
        return head;
        
    }

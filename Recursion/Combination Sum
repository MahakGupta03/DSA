/*Look solution on Striver A to Z Sheet : (https://takeuforward.org/data-structure/combination-sum-1/) */
/*
  TC->O(2^t * k)
  SC-> O(k*x)
*/

public static void findCombination(int i,int n, List<List<Integer>>ans,List<Integer>ds,int target,int []arr ){
        if(i==n){
            if(target==0){
                ans.add(new ArrayList<>(ds));
            }
            return;
        }
        if(arr[i]<=target){
            ds.add(arr[i]);
            findCombination(i,n,ans,ds,target-arr[i],arr);
            ds.remove(ds.size()-1);
        }
        findCombination(i+1,n,ans,ds,target,arr);

    }

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = candidates.length;
        findCombination(0,n,ans,new ArrayList<Integer>(),target,candidates);
        return ans;
    }

/*Look solution at Striver A to Z sheet : (https://takeuforward.org/data-structure/combination-sum-ii-find-all-unique-combinations/)*/
/*
  TC-> O(2^n*k)
  SC-> O(k*x)
*/
 public static void findCombination(int i, int n, List<Integer>ds, int target, List<List<Integer>>ans, int []arr){
        if(target==0){
            ans.add(new ArrayList<>(ds));
            return;
        }
        

        for(int j=i;j<n;j++){
            if(j>i && arr[j]==arr[j-1]) continue;
            if(arr[j]>target)break;
            ds.add(arr[j]);
            findCombination(j+1,n,ds,target-arr[j],ans,arr);
            ds.remove(ds.size()-1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        int n = candidates.length;
        findCombination(0,n,new ArrayList<Integer>(),target,ans,candidates);
        return ans;
    }

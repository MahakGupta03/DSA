public int minimumEffortPath(int[][] heights) {
        int n = heights.length;
        int m = heights[0].length;
        PriorityQueue<int[]> q = new PriorityQueue<>((a,b) -> a[0] - b[0]);
        int dist[][] = new int[n][m];
        for(int row[] : dist){
            Arrays.fill(row,(int)1e9);
        }
        dist[0][0] = 0;
        q.add(new int[]{0,0,0});
        int delrow[] = {-1,0,+1,0};
        int delcol[] = {0,+1,0,-1};
        while(!q.isEmpty()){
            int diff = q.peek()[0];
            int r = q.peek()[1];
            int c = q.peek()[2];
            q.remove();
            if(r==n-1 && c == m-1) return diff;
            for(int i=0;i<4;i++){
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m){
                    int d = Math.max(diff,Math.abs(heights[r][c] - heights[nrow][ncol]));
                    if(d<dist[nrow][ncol]){
                        dist[nrow][ncol] = d;
                        q.add(new int[]{d,nrow,ncol});
                    }
                }
                
            }
        }
        return -1;
    }

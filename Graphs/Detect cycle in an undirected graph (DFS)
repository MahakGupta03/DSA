class Pair{
        int n;
        int p;
        Pair(int n, int p){
            this.n = n;
            this.p = p;
        }
    }
    // Function to detect cycle in an undirected graph.
    public boolean bfs(int src, ArrayList<ArrayList<Integer>> adj, boolean vis[]){
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(src,-1));
        vis[src] = true;
        while(!q.isEmpty()){
            int node = q.peek().n;
            int parent = q.peek().p;
            q.remove();
            for(int adjNode : adj.get(node)){
                if(vis[adjNode]==false){
                    vis[adjNode] = true;
                    q.add(new Pair(adjNode,node));
                }
                else if(adjNode!=parent){
                    return true;
                }
            }
            
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean v[] = new boolean[V];
        Arrays.fill(v,false);
        for(int i=0;i<V;i++){
            if(v[i]==false){
                if(bfs(i,adj,v)==true){
                    return true;
                }
            }
        }
        return false;
        
    }

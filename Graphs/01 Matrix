/*
  Time Complexity: O(NxM + NxMx4) ~ O(N x M)
  Space Complexity: O(N x M) + O(N x M) + O(N x M) ~ O(N x M)
*/

class Node{
    int first;
    int second;
    int third;
    Node(int first, int second, int third){
        this.first = first;
        this.second = second;
        this.third = third;
    }
}
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        Queue<Node> q = new LinkedList<>();
        int vis[][] = new int [n][m];
        int dist[][] = new int[n][m];
        //marks distance for all 0's as 0 and add to queue 
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    vis[i][j]=1;
                    q.add(new Node(i,j,0));
                }
            }
        }

        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            int steps = q.peek().third;
            q.remove();
            dist[row][col] = steps;
            //move in all four directions and mark the distance for all 1's by adding 1 to steps (kyuki sare 1's k liye 0 kuch distance pr hai)
            int deltaRow[] = {-1,0,+1,0};
            int deltaCol[] = {0,+1,0,-1};
            for(int i=0;i<4;i++){
                int nrow = row + deltaRow[i];
                int ncol = col + deltaCol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0){
                    vis[nrow][ncol]=1;
                    q.add(new Node(nrow,ncol,steps+1));
                }
            }
        }
        return dist;
    }
}

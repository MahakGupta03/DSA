/*
TC-> O ( n x n ) x 4 
SC-> O ( n x n )
*/

//This que. is solved using Breadth First Search
class Pair{
        int row;
        int col;
        int tm;
        Pair(int row, int col, int tm){
            this.row = row;
            this.col = col;
            this.tm = tm;
        }
    }
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        //in the queue we are maintaing the rotten oranges and the time at which they were rotten
        Queue<Pair> q = new LinkedList<>();
        int vis[][] = new int[n][m];
        int cntfresh = 0;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j,0));
                    vis[i][j] = 2;
                }
                
                //counting total fresh oranges initially
                if(grid[i][j]==1){
                    cntfresh++;
                }
            }
        }
        int tm = 0;
        //this is for moving in all four direction (left,right,up,down)
        int drow[] = {-1,0,+1,0};
        int dcol[] = {0,+1,0,-1};
        int cnt = 0;
        while(!q.isEmpty()){
            int r = q.peek().row;
            int c = q.peek().col;
            int t = q.peek().tm;
            q.remove();
           
            tm = Math.max(tm,t);
            for(int i=0;i<4;i++){
                int nrow = r+drow[i];
                int ncol = c+dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && vis[nrow][ncol]!=2){
                    q.add(new Pair(nrow,ncol,t+1));
                    vis[nrow][ncol] = 2;
                    cnt++;
                }
            }
        }

        if(cntfresh!=cnt) return -1;
        return tm;

    }

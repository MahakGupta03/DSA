 /* DFS */
    public void dfs(int row, int col, int initial,int ans[][], int image[][], int color, int drow[], int dcol[]){
        ans[row][col] = color;
        int n = image.length;
        int m = image[0].length;
        for(int i=0;i<4;i++){
            int nrow = row+drow[i];
            int ncol = col+dcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && image[nrow][ncol]==initial && ans[nrow][ncol]!=color){
                dfs(nrow,ncol,initial,ans,image,color,drow,dcol);
            }
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int ans[][] = image;
        int ini = image[sr][sc];
        int drow[] = {-1,0,+1,0};
        int dcol[] = {0,+1,0,-1};
        dfs(sr,sc,ini,ans,image,color,drow,dcol);
        return ans;
    }



    /* BFS */
    class Pair{
        int row;
        int col;
        Pair(int row, int col){
            this.row = row;
            this.col = col;
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int n = image.length;
        int m = image[0].length;
        Queue<Pair> q = new LinkedList<>();
        int vis[][] = new int[n][m];
        int ini = image[sr][sc];
        q.add(new Pair(sr,sc));
        int drow[] = {-1,0,+1,0};
        int dcol[] = {0,+1,0,-1};
        while(!q.isEmpty()){
            int r = q.peek().row;
            int c = q.peek().col;
            if(image[r][c]!=color){
                image[r][c] = color;
            }
            for(int i=0;i<4;i++){
                int nrow = r + drow[i];
                int ncol = c + dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && image[nrow][ncol]==ini && vis[nrow][ncol]!=color){
                    vis[nrow][ncol] = color;
                    q.add(new Pair(nrow,ncol));
                }
            }
            
            q.remove();
            
        }
        return image;
    }

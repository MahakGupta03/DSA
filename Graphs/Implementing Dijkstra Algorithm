class Pair{
    int distance;
    int node;
    Pair(int distance, int node){
        this.distance = distance;
        this.node = node;
    }
}

class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        //make priority queue (min-heap) and assign priority according to min distance
        PriorityQueue<Pair> pq = new PriorityQueue<>((x,y) -> x.distance - y.distance);
        int dist[] = new int[V];
        for(int i=0;i<V;i++){   
            dist[i] = (int)1e9;  //initially all are at infinite distance
        }
        //assign distance from source node to sorce node as 0
        dist[S] = 0;
        pq.add(new Pair(0,S));
        while(!pq.isEmpty()){
            int dis = pq.peek().distance;
            int node = pq.peek().node;
            pq.remove();
            //check for all connected node
            for(int i=0;i<adj.get(node).size();i++){
                int adjWeight = adj.get(node).get(i).get(1);
                int adjNode = adj.get(node).get(i).get(0);
                if(dis + adjWeight < dist[adjNode]){   //if distance is minimum then previous than update the distance
                    dist[adjNode] = dis + adjWeight;
                    pq.add(new Pair(dist[adjNode], adjNode));
                }
            }
        }
        return dist;
    }
}
